// Code generated by ec3. DO NOT EDIT.

#include "textflag.h"

// func scalarcmov(y *scalar, x *scalar, c uint)
TEXT ·scalarcmov(SB), NOSPLIT, $0-24
	MOVQ    y+0(FP), AX
	MOVQ    x+8(FP), CX
	MOVQ    c+16(FP), DX
	MOVQ    (AX), BX
	MOVQ    8(AX), BP
	MOVQ    16(AX), SI
	MOVQ    24(AX), DI
	MOVQ    (CX), R8
	MOVQ    8(CX), R9
	MOVQ    16(CX), R10
	MOVQ    24(CX), CX
	TESTQ   DX, DX
	CMOVQNE R8, BX
	CMOVQNE R9, BP
	CMOVQNE R10, SI
	CMOVQNE CX, DI
	MOVQ    BX, (AX)
	MOVQ    BP, 8(AX)
	MOVQ    SI, 16(AX)
	MOVQ    DI, 24(AX)
	RET

// func scalaradd(z *scalar, x *scalar, y *scalar)
TEXT ·scalaradd(SB), NOSPLIT, $0-24
	MOVQ    z+0(FP), AX
	MOVQ    x+8(FP), CX
	MOVQ    y+16(FP), DX
	MOVQ    (CX), BX
	MOVQ    8(CX), BP
	MOVQ    16(CX), SI
	MOVQ    24(CX), CX
	MOVQ    (DX), DI
	MOVQ    8(DX), R8
	MOVQ    16(DX), R9
	MOVQ    24(DX), DX
	XORQ    R10, R10
	ADDQ    DI, BX
	ADCQ    R8, BP
	ADCQ    R9, SI
	ADCQ    DX, CX
	ADCQ    $0x00000000, R10
	MOVQ    BX, DX
	MOVQ    BP, DI
	MOVQ    SI, R8
	MOVQ    CX, R9
	SUBQ    p<>+0(SB), DX
	SBBQ    p<>+8(SB), DI
	SBBQ    p<>+16(SB), R8
	SBBQ    p<>+24(SB), R9
	SBBQ    $0x00000000, R10
	CMOVQCC DX, BX
	CMOVQCC DI, BP
	CMOVQCC R8, SI
	CMOVQCC R9, CX
	MOVQ    BX, (AX)
	MOVQ    BP, 8(AX)
	MOVQ    SI, 16(AX)
	MOVQ    CX, 24(AX)
	RET

DATA p<>+0(SB)/8, $0xf3b9cac2fc632551
DATA p<>+8(SB)/8, $0xbce6faada7179e84
DATA p<>+16(SB)/8, $0xffffffffffffffff
DATA p<>+24(SB)/8, $0xffffffff00000000
GLOBL p<>(SB), RODATA|NOPTR, $32

// func scalarsub(z *scalar, x *scalar, y *scalar)
TEXT ·scalarsub(SB), NOSPLIT, $0-24
	MOVQ    z+0(FP), AX
	MOVQ    x+8(FP), CX
	MOVQ    y+16(FP), DX
	MOVQ    (CX), BX
	MOVQ    8(CX), BP
	MOVQ    16(CX), SI
	MOVQ    24(CX), CX
	MOVQ    (DX), DI
	MOVQ    8(DX), R8
	MOVQ    16(DX), R9
	MOVQ    24(DX), DX
	XORQ    R10, R10
	SUBQ    DI, BX
	SBBQ    R8, BP
	SBBQ    R9, SI
	SBBQ    DX, CX
	SBBQ    $0x00000000, R10
	MOVQ    BX, DX
	MOVQ    BP, DI
	MOVQ    SI, R8
	MOVQ    CX, R9
	ADDQ    p<>+0(SB), DX
	ADCQ    p<>+8(SB), DI
	ADCQ    p<>+16(SB), R8
	ADCQ    p<>+24(SB), R9
	ANDQ    $0x00000001, R10
	CMOVQNE DX, BX
	CMOVQNE DI, BP
	CMOVQNE R8, SI
	CMOVQNE R9, CX
	MOVQ    BX, (AX)
	MOVQ    BP, 8(AX)
	MOVQ    SI, 16(AX)
	MOVQ    CX, 24(AX)
	RET

// func scalarmul(z *scalar, x *scalar, y *scalar)
TEXT ·scalarmul(SB), NOSPLIT, $64-24
	MOVQ z+0(FP), AX
	MOVQ x+8(FP), CX
	MOVQ y+16(FP), BX

	// y[0]
	MOVQ (BX), DX
	XORQ BP, BP

	// x[0] * y[0] -> z[0]
	MULXQ (CX), SI, DI

	// x[1] * y[0] -> z[1]
	MULXQ 8(CX), R8, R9
	ADCXQ R8, DI

	// x[2] * y[0] -> z[2]
	MULXQ 16(CX), R8, R10
	ADCXQ R8, R9

	// x[3] * y[0] -> z[3]
	MULXQ 24(CX), DX, R8
	ADCXQ DX, R10
	ADCXQ BP, R8
	MOVQ  SI, (SP)

	// y[1]
	MOVQ 8(BX), DX
	XORQ BP, BP

	// x[0] * y[1] -> z[1]
	MULXQ (CX), SI, R11
	ADCXQ SI, DI
	ADOXQ R11, R9

	// x[1] * y[1] -> z[2]
	MULXQ 8(CX), SI, R11
	ADCXQ SI, R9
	ADOXQ R11, R10

	// x[2] * y[1] -> z[3]
	MULXQ 16(CX), SI, R11
	ADCXQ SI, R10
	ADOXQ R11, R8

	// x[3] * y[1] -> z[4]
	MULXQ 24(CX), DX, SI
	ADCXQ DX, R8
	ADCXQ BP, SI
	ADOXQ BP, SI
	MOVQ  DI, 8(SP)

	// y[2]
	MOVQ 16(BX), DX
	XORQ BP, BP

	// x[0] * y[2] -> z[2]
	MULXQ (CX), DI, R11
	ADCXQ DI, R9
	ADOXQ R11, R10

	// x[1] * y[2] -> z[3]
	MULXQ 8(CX), DI, R11
	ADCXQ DI, R10
	ADOXQ R11, R8

	// x[2] * y[2] -> z[4]
	MULXQ 16(CX), DI, R11
	ADCXQ DI, R8
	ADOXQ R11, SI

	// x[3] * y[2] -> z[5]
	MULXQ 24(CX), DX, DI
	ADCXQ DX, SI
	ADCXQ BP, DI
	ADOXQ BP, DI
	MOVQ  R9, 16(SP)

	// y[3]
	MOVQ 24(BX), DX
	XORQ BP, BP

	// x[0] * y[3] -> z[3]
	MULXQ (CX), BX, R9
	ADCXQ BX, R10
	ADOXQ R9, R8

	// x[1] * y[3] -> z[4]
	MULXQ 8(CX), BX, R9
	ADCXQ BX, R8
	ADOXQ R9, SI

	// x[2] * y[3] -> z[5]
	MULXQ 16(CX), BX, R9
	ADCXQ BX, SI
	ADOXQ R9, DI

	// x[3] * y[3] -> z[6]
	MULXQ 24(CX), CX, DX
	ADCXQ CX, DI
	ADCXQ BP, DX
	ADOXQ BP, DX
	MOVQ  R10, 24(SP)
	MOVQ  R8, 32(SP)
	MOVQ  SI, 40(SP)
	MOVQ  DI, 48(SP)
	MOVQ  DX, 56(SP)

	// Reduction.
	XORQ    CX, CX
	MOVQ    (SP), BX
	MOVQ    8(SP), BP
	MOVQ    16(SP), SI
	MOVQ    24(SP), DI
	MOVQ    mprime<>+0(SB), DX
	MULXQ   BX, DX, R8
	MOVQ    32(SP), R8
	XORQ    R9, R9
	MULXQ   p<>+0(SB), R10, R11
	ADCXQ   R10, BX
	ADOXQ   R11, BP
	MULXQ   p<>+8(SB), BX, R10
	ADCXQ   BX, BP
	ADOXQ   R10, SI
	MULXQ   p<>+16(SB), BX, R10
	ADCXQ   BX, SI
	ADOXQ   R10, DI
	MULXQ   p<>+24(SB), DX, BX
	ADCXQ   DX, DI
	ADOXQ   BX, R8
	ADCXQ   CX, R8
	ADCXQ   CX, R9
	ADOXQ   CX, R9
	MOVQ    mprime<>+0(SB), DX
	MULXQ   BP, DX, BX
	MOVQ    40(SP), BX
	XORQ    R10, R10
	MULXQ   p<>+0(SB), R11, R12
	ADCXQ   R11, BP
	ADOXQ   R12, SI
	MULXQ   p<>+8(SB), BP, R11
	ADCXQ   BP, SI
	ADOXQ   R11, DI
	MULXQ   p<>+16(SB), BP, R11
	ADCXQ   BP, DI
	ADOXQ   R11, R8
	MULXQ   p<>+24(SB), DX, BP
	ADCXQ   DX, R8
	ADOXQ   BP, BX
	ADCXQ   R9, BX
	ADCXQ   CX, R10
	ADOXQ   CX, R10
	MOVQ    mprime<>+0(SB), DX
	MULXQ   SI, DX, BP
	MOVQ    48(SP), BP
	XORQ    R9, R9
	MULXQ   p<>+0(SB), R11, R12
	ADCXQ   R11, SI
	ADOXQ   R12, DI
	MULXQ   p<>+8(SB), SI, R11
	ADCXQ   SI, DI
	ADOXQ   R11, R8
	MULXQ   p<>+16(SB), SI, R11
	ADCXQ   SI, R8
	ADOXQ   R11, BX
	MULXQ   p<>+24(SB), DX, SI
	ADCXQ   DX, BX
	ADOXQ   SI, BP
	ADCXQ   R10, BP
	ADCXQ   CX, R9
	ADOXQ   CX, R9
	MOVQ    mprime<>+0(SB), DX
	MULXQ   DI, DX, SI
	MOVQ    56(SP), SI
	XORQ    R10, R10
	MULXQ   p<>+0(SB), R11, R12
	ADCXQ   R11, DI
	ADOXQ   R12, R8
	MULXQ   p<>+8(SB), DI, R11
	ADCXQ   DI, R8
	ADOXQ   R11, BX
	MULXQ   p<>+16(SB), DI, R11
	ADCXQ   DI, BX
	ADOXQ   R11, BP
	MULXQ   p<>+24(SB), DX, DI
	ADCXQ   DX, BP
	ADOXQ   DI, SI
	ADCXQ   R9, SI
	ADCXQ   CX, R10
	ADOXQ   CX, R10
	MOVQ    R8, CX
	MOVQ    BX, DX
	MOVQ    BP, DI
	MOVQ    SI, R9
	SUBQ    p<>+0(SB), CX
	SBBQ    p<>+8(SB), DX
	SBBQ    p<>+16(SB), DI
	SBBQ    p<>+24(SB), R9
	SBBQ    $0x00000000, R10
	CMOVQCC CX, R8
	CMOVQCC DX, BX
	CMOVQCC DI, BP
	CMOVQCC R9, SI
	MOVQ    R8, (AX)
	MOVQ    BX, 8(AX)
	MOVQ    BP, 16(AX)
	MOVQ    SI, 24(AX)
	RET

DATA mprime<>+0(SB)/8, $0xccd1c8aaee00bc4f
GLOBL mprime<>(SB), RODATA|NOPTR, $8

// func scalarsqr(z *scalar, x *scalar)
TEXT ·scalarsqr(SB), NOSPLIT, $64-16
	MOVQ z+0(FP), CX
	MOVQ x+8(FP), BX

	// x[0] * x[1]
	MOVQ (BX), AX
	MULQ 8(BX)
	MOVQ AX, BP
	MOVQ DX, SI

	// x[0] * x[2]
	MOVQ (BX), AX
	MULQ 16(BX)
	ADDQ AX, SI
	MOVQ $0x00000000, DI
	ADCQ DX, DI

	// x[0] * x[3]
	MOVQ (BX), AX
	MULQ 24(BX)
	ADDQ AX, DI
	MOVQ $0x00000000, R8
	ADCQ DX, R8

	// x[1] * x[2]
	MOVQ 8(BX), AX
	MULQ 16(BX)
	ADDQ AX, DI
	ADCQ DX, R8
	MOVQ $0x00000000, R9
	ADCQ $0x00000000, R9

	// x[1] * x[3]
	MOVQ 8(BX), AX
	MULQ 24(BX)
	ADDQ AX, R8
	ADCQ DX, R9

	// x[2] * x[3]
	MOVQ 16(BX), AX
	MULQ 24(BX)
	ADDQ AX, R9
	MOVQ $0x00000000, R10
	ADCQ DX, R10

	// *2
	ADDQ BP, BP
	ADCQ SI, SI
	ADCQ DI, DI
	ADCQ R8, R8
	ADCQ R9, R9
	ADCQ R10, R10
	MOVQ $0x00000000, R11
	ADCQ $0x00000000, R11

	// x[0] * x[0]
	MOVQ (BX), AX
	MULQ (BX)
	MOVQ AX, R12
	ADDQ DX, BP
	ADCQ $0x00000000, SI

	// x[1] * x[1]
	MOVQ 8(BX), AX
	MULQ 8(BX)
	ADDQ AX, SI
	ADCQ DX, DI
	ADCQ $0x00000000, R8

	// x[2] * x[2]
	MOVQ 16(BX), AX
	MULQ 16(BX)
	ADDQ AX, R8
	ADCQ DX, R9
	ADCQ $0x00000000, R10

	// x[3] * x[3]
	MOVQ 24(BX), AX
	MULQ 24(BX)
	ADDQ AX, R10
	ADCQ DX, R11
	MOVQ $0x00000000, AX
	ADCQ $0x00000000, AX

	// Copy to result.
	MOVQ R12, (SP)
	MOVQ BP, 8(SP)
	MOVQ SI, 16(SP)
	MOVQ DI, 24(SP)
	MOVQ R8, 32(SP)
	MOVQ R9, 40(SP)
	MOVQ R10, 48(SP)
	MOVQ R11, 56(SP)

	// Reduction.
	XORQ    AX, AX
	MOVQ    (SP), BX
	MOVQ    8(SP), BP
	MOVQ    16(SP), SI
	MOVQ    24(SP), DI
	MOVQ    mprime<>+0(SB), DX
	MULXQ   BX, DX, R8
	MOVQ    32(SP), R8
	XORQ    R9, R9
	MULXQ   p<>+0(SB), R10, R11
	ADCXQ   R10, BX
	ADOXQ   R11, BP
	MULXQ   p<>+8(SB), BX, R10
	ADCXQ   BX, BP
	ADOXQ   R10, SI
	MULXQ   p<>+16(SB), BX, R10
	ADCXQ   BX, SI
	ADOXQ   R10, DI
	MULXQ   p<>+24(SB), DX, BX
	ADCXQ   DX, DI
	ADOXQ   BX, R8
	ADCXQ   AX, R8
	ADCXQ   AX, R9
	ADOXQ   AX, R9
	MOVQ    mprime<>+0(SB), DX
	MULXQ   BP, DX, BX
	MOVQ    40(SP), BX
	XORQ    R10, R10
	MULXQ   p<>+0(SB), R11, R12
	ADCXQ   R11, BP
	ADOXQ   R12, SI
	MULXQ   p<>+8(SB), BP, R11
	ADCXQ   BP, SI
	ADOXQ   R11, DI
	MULXQ   p<>+16(SB), BP, R11
	ADCXQ   BP, DI
	ADOXQ   R11, R8
	MULXQ   p<>+24(SB), DX, BP
	ADCXQ   DX, R8
	ADOXQ   BP, BX
	ADCXQ   R9, BX
	ADCXQ   AX, R10
	ADOXQ   AX, R10
	MOVQ    mprime<>+0(SB), DX
	MULXQ   SI, DX, BP
	MOVQ    48(SP), BP
	XORQ    R9, R9
	MULXQ   p<>+0(SB), R11, R12
	ADCXQ   R11, SI
	ADOXQ   R12, DI
	MULXQ   p<>+8(SB), SI, R11
	ADCXQ   SI, DI
	ADOXQ   R11, R8
	MULXQ   p<>+16(SB), SI, R11
	ADCXQ   SI, R8
	ADOXQ   R11, BX
	MULXQ   p<>+24(SB), DX, SI
	ADCXQ   DX, BX
	ADOXQ   SI, BP
	ADCXQ   R10, BP
	ADCXQ   AX, R9
	ADOXQ   AX, R9
	MOVQ    mprime<>+0(SB), DX
	MULXQ   DI, DX, SI
	MOVQ    56(SP), SI
	XORQ    R10, R10
	MULXQ   p<>+0(SB), R11, R12
	ADCXQ   R11, DI
	ADOXQ   R12, R8
	MULXQ   p<>+8(SB), DI, R11
	ADCXQ   DI, R8
	ADOXQ   R11, BX
	MULXQ   p<>+16(SB), DI, R11
	ADCXQ   DI, BX
	ADOXQ   R11, BP
	MULXQ   p<>+24(SB), DX, DI
	ADCXQ   DX, BP
	ADOXQ   DI, SI
	ADCXQ   R9, SI
	ADCXQ   AX, R10
	ADOXQ   AX, R10
	MOVQ    R8, AX
	MOVQ    BX, DX
	MOVQ    BP, DI
	MOVQ    SI, R9
	SUBQ    p<>+0(SB), AX
	SBBQ    p<>+8(SB), DX
	SBBQ    p<>+16(SB), DI
	SBBQ    p<>+24(SB), R9
	SBBQ    $0x00000000, R10
	CMOVQCC AX, R8
	CMOVQCC DX, BX
	CMOVQCC DI, BP
	CMOVQCC R9, SI
	MOVQ    R8, (CX)
	MOVQ    BX, 8(CX)
	MOVQ    BP, 16(CX)
	MOVQ    SI, 24(CX)
	RET
